From: hololeap <hololeap@protonmail.com>
Signed-off-by: hololeap <hololeap@protonmail.com>

The `refactor` executable from dev-haskell/apply-refact has been renamed to
`apply-refactor` to avoid name collisions in the future. This patch applies the
new name to code that uses this executable.

diff -urN hlint-3.3.6/src/CmdLine.hs hlint-3.3.6-r1/src/CmdLine.hs
--- hlint-3.3.6/src/CmdLine.hs	2001-09-08 19:46:40.000000000 -0600
+++ hlint-3.3.6-r1/src/CmdLine.hs	2022-01-22 22:29:30.488903519 -0700
@@ -160,9 +160,9 @@
         ,cmdNoExitCode = nam_ "no-exit-code" &= help "Do not give a negative exit if hints"
         ,cmdTiming = nam_ "timing" &= help "Display timing information"
         ,cmdSerialise = nam_ "serialise" &= help "Serialise hint data for consumption by apply-refact"
-        ,cmdRefactor = nam_ "refactor" &= help "Automatically invoke `refactor` to apply hints"
-        ,cmdRefactorOptions = nam_ "refactor-options" &= typ "OPTIONS" &= help "Options to pass to the `refactor` executable"
-        ,cmdWithRefactor = nam_ "with-refactor" &= help "Give the path to refactor"
+        ,cmdRefactor = nam_ "refactor" &= help "Automatically invoke `apply-refactor` to apply hints"
+        ,cmdRefactorOptions = nam_ "refactor-options" &= typ "OPTIONS" &= help "Options to pass to the `apply-refactor` executable"
+        ,cmdWithRefactor = nam_ "with-refactor" &= help "Give the path to apply-refactor"
         ,cmdIgnoreGlob = nam_ "ignore-glob" &= help "Ignore paths matching glob pattern (e.g. foo/bar/*.hs)"
         ,cmdGenerateSummary = nam_ "generate-summary" &= opt "hints.md" &= help "Generate a summary of built-in hints"
         ,cmdTest = nam_ "test" &= help "Run the test suite"
diff -urN hlint-3.3.6/src/Refact.hs hlint-3.3.6-r1/src/Refact.hs
--- hlint-3.3.6/src/Refact.hs	2001-09-08 19:46:40.000000000 -0600
+++ hlint-3.3.6-r1/src/Refact.hs	2022-01-22 22:17:26.948903169 -0700
@@ -44,7 +44,7 @@
 
 refactorPath :: Maybe FilePath -> IO (Either String FilePath)
 refactorPath rpath = do
-    let excPath = fromMaybe "refactor" rpath
+    let excPath = fromMaybe "apply-refactor" rpath
     mexc <- findExecutable excPath
     case mexc of
         Just exc -> do
@@ -55,10 +55,9 @@
                                 ++ showVersion minRefactorVersion
                                 ++ " or later. Apply-refact can be installed from Cabal or Stack."
         Nothing -> pure $ Left $ unlines
-                       [ "Could not find 'refactor' executable"
+                       [ "Could not find 'apply-refactor' executable"
                        , "Tried to find '" ++ excPath ++ "' on the PATH"
-                       , "'refactor' is provided by the 'apply-refact' package and has to be installed"
-                       , "<https://github.com/mpickering/apply-refact>"
+                       , "'apply-refactor' is provided by the 'dev-haskell/apply-refact[executable]' package and has to be installed"
                        ]
 
 runRefactoring :: FilePath -> FilePath -> FilePath -> [Extension] -> [Extension] -> String -> IO ExitCode
