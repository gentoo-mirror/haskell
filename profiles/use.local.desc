# This file is deprecated as per GLEP 56 in favor of metadata.xml.
# Please add your descriptions to your package's metadata.xml ONLY.
# * generated automatically using pmaint *

app-admin/propellor:type-errors - Build with type-errors library for better error messages and less memory use
app-office/hledger-ui:threaded - Build with support for multithreaded execution
app-office/hledger-web:library-only - Build for use with "yesod devel"
app-office/hledger-web:threaded - Build with support for multithreaded execution.
app-portage/hackport:profile - Enable profiling flags
app-text/pandoc:embed-data-files - Embed data files in binary for relocatable executable.
app-text/pandoc-cli:lua - Support custom modifications and conversions with the pandoc Lua scripting engine.
app-text/pandoc-cli:nightly - Add '-nightly-COMPILEDATE' to the output of '--version'.
app-text/pandoc-cli:server - Include support for running pandoc as an HTTP server.
dev-haskell/abstract-deque:usecas - Enable the reference implementation to use hardware compare-and-swap.
dev-haskell/acid-state:executable - Build the acid-state-repair executable
dev-haskell/ad:ffi - 
dev-haskell/aeson:cffi - Controls whether to include c-ffi bits or pure haskell. Default to False for security.
dev-haskell/aeson:ordered-keymap - Use ordered @Data.Map.Strict@ for KeyMap implementation.
dev-haskell/aeson-pretty:executable - build/install the command-line tool as well as the library
dev-haskell/aeson-yaml:build-binaries - Build the binaries
dev-haskell/alsa-pcm:buildexamples - Build example executables
dev-haskell/alsa-seq:modifyfilter - Use native event filter functions that are provided by newer ALSA versions
dev-haskell/ansi-terminal:example - Build the example application
dev-haskell/ansi-wl-pprint:examples - Build the example application
dev-haskell/apply-refact:executable - Install the apply-refactor executable
dev-haskell/assoc:tagged - You can disable the use of the `tagged` package using `-f-tagged`. Disabing this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/atomic-primops:debug - Enable extra internal checks.
dev-haskell/beam-automigrate:ghcipretty - Enable pretty-show for pretty-printing purposes
dev-haskell/bench-show:charts - Build the modules that provide charting functionality
dev-haskell/bench-show:colors - Use pretty printing with colors
dev-haskell/bifunctors:semigroups - You can disable the use of the `semigroups` package using `-f-semigroups`. Disabing this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/bifunctors:tagged - You can disable the use of the `tagged` package using `-f-tagged`. Disabing this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/bindings-glfw:exposenative - Whether or not to use the native access functions.
dev-haskell/bindings-glfw:osmesa - Determines whether or not to use the Mesa 3D rendering context.
dev-haskell/biosff:fclip - Build the 'fclip' executable.
dev-haskell/biosff:flower - Build the 'flower' executable.
dev-haskell/biosff:frecover - Build the 'frecover' executable.
dev-haskell/bits-atomic:test - Build test program.
dev-haskell/bitstring:withquickcheck - Build with QuickCheck test. Note that Show instances will be different.
dev-haskell/bitvec:gmp - Link against the GMP library for the ultimate performance of `zipBits`, `invertBits` and `countBits`. Users are strongly encouraged to enable this flag whenever possible.
dev-haskell/boring:tagged - You can disable the use of the `tagged` package using `-f-tagged`. Disabling this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/brick:examples - Build demonstration programs
dev-haskell/broadcast-chan:sync - Benchmarks synchronisation primitives used in main benchmark.
dev-haskell/broadcast-chan:threaded - Run benchmarks with threaded backend.
dev-haskell/btrfs:examples - Build examples
dev-haskell/bytebuild:checked - Add bounds-checking to primitive array operations
dev-haskell/bytedump:executable - build executable file
dev-haskell/c2hs:regression - Enable regression suite build.
dev-haskell/cabal-install:debug-conflict-sets - Add additional information to ConflictSets
dev-haskell/cabal-install:lukko - Use @lukko@ for file-locking
dev-haskell/cabal-install:native-dns - Enable use of the [resolv](https://hackage.haskell.org/package/resolv) & [windns](https://hackage.haskell.org/package/windns) packages for performing DNS lookups
dev-haskell/cabal-plan:exe - Enable @exe:cabal-plan@ component
dev-haskell/cabal-plan:license-report - Enable @license-report@ sub-command (only relevant when the @exe@ flag is active)
dev-haskell/cabal-plan:underline - Enable underlining of primary unit-ids
dev-haskell/cabal-rpm:curl - Use curl library to query Stackage instead of http-client
dev-haskell/cairo:svg - Build the Scalable Vector Graphics (SVG) backend of Cairo.
dev-haskell/categories:optimize - Enable optimizations
dev-haskell/chaselev-deque:debug - Enable the extra internal checks.
dev-haskell/cheapskate:dingus - Build cheapskate-dingus cgi script
dev-haskell/chell:color-output - use colors in program output
dev-haskell/chimera:representable - Define Representable instance from adjunctions package
dev-haskell/citeproc:executable - Build citeproc executable
dev-haskell/citeproc:icu - Use Haskell bindings to the ICU library
dev-haskell/clash-ghc:dynamic - Build Clash binaries with GHC flag `-dynamic`. This flag should only be used for packaging purposes. Installations using cabal should use `--enable-executable-dynamic`!
dev-haskell/clash-ghc:ghc-paths - Locate the GHC core libraries using the `ghc-paths` package. Note: this flag may make binaries less relocatable, by hard-coding an absolute path to the core libraries.
dev-haskell/cmark:system-cmark - use app-text/cmark instead of bundled copy
dev-haskell/cmdargs:quotation - Build the Quote module
dev-haskell/cmdargs:testprog - Build the test program
dev-haskell/comonad:indexed-traversable - You can disable the use of the `indexed-traversable` package using `-f-indexed-traversable`. Disabling this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users. If disabled we will not supply instances of `FunctorWithIndex`
dev-haskell/constraints-deriving:constraints - Use vanilla constraints package as a dependency instead of the manual minimalistic definitions copied from there.
dev-haskell/contravariant:semigroups - You can disable the use of the `semigroups` package using `-f-semigroups`. Disabling this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/contravariant:statevar - You can disable the use of the `StateVar` package using `-f-StateVar`. Disabling this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/contravariant:tagged - You can disable the use of the `tagged` package using `-f-tagged`. Disabling this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/country-codes:generate - Build generate executable?
dev-haskell/criterion:embed-data-files - Embed the data files in the binary for a relocatable executable. (Warning: This will increase the executable size significantly.)
dev-haskell/crypto-api:all-cpolys - Build all the CMAC polynomes up to 10000 bits instead of just the usual ones
dev-haskell/cryptonite:integer-gmp - Whether or not to use GMP for some functions
dev-haskell/cryptonite:target-attributes - use GCC / clang function attributes instead of global target options.
dev-haskell/data-lens:derivedatatypeable - Use the DeriveDataTypeable extension. This makes lens compile with old compilers. Users need not worry about it.
dev-haskell/data-reify:examples - Install test executables
dev-haskell/diagrams:cairo - Enable the cairo backend
dev-haskell/diagrams:canvas - Enable the Haskell-native Canvas backend
dev-haskell/diagrams:gtk - Enable the GTK backend
dev-haskell/diagrams:postscript - Enable the Haskell-native PostScript backend
dev-haskell/diagrams:rasterific - Enable the Haskell-native Rasterific backend
dev-haskell/diagrams:svg - Enable the Haskell-native SVG backend
dev-haskell/diagrams-builder:cairo - install cairo-specific builder tool
dev-haskell/diagrams-builder:pgf - install PGF-specific builder tool
dev-haskell/diagrams-builder:rasterific - install rasterific-specific builder tool
dev-haskell/diagrams-builder:svg - install svg-specific builder tool
dev-haskell/dimensions:unsafeindices - Disable bound checks on Idx and Idxs types.
dev-haskell/dlist:werror - Enable -Werror
dev-haskell/entropy:donotgetentropy - Avoid use of the getentropy() *nix function. By default getentropy will be used if detected during compilation (this plays poorly with cross compilation).
dev-haskell/extensible:barbies - "define instances for barbies"
dev-haskell/extensible:cassava - "define instances for cassava"
dev-haskell/extensions:executable - Build the extensions executable
dev-haskell/ffmpeg-light:builddemo - Build demo executable
dev-haskell/ffmpeg-light:buildrasterdemo - Build Rasterific demo executable
dev-haskell/ffmpeg-light:buildtranscodedemo - Build transcode demo executable
dev-haskell/ffmpeg-light:buildvplaydemo - Build video player demo executable
dev-haskell/filestore:maxcount - Make use of a recent (>= 2.3.0) Darcs feature which vastly improves the performance of 'latest'. You should disable this flag if you plan to use gitit with an older version of Darcs, or 'latest' will raise an error.
dev-haskell/finite-field:useghctypelits - GHC.TypeLits module
dev-haskell/floskell:executable - Build the floskell executable
dev-haskell/focuslist:examples - Build the focuslist-readme example executable
dev-haskell/foldable1-classes-compat:tagged - You can disable the use of the `tagged` package using `-f-tagged`. Disabling this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/foundation:experimental - Enable building experimental features, known as highly unstable or without good support cross-platform
dev-haskell/fourmolu:executable - Build the fourmolu executable
dev-haskell/fourmolu:fixity-th - Parse the default fixity information via Template Haskell
dev-haskell/freer-effects:pedantic - Pass additional warning flags and -Werror to GHC.
dev-haskell/freer-effects:test-hlint - Enable test suite that checks sources using HLint.
dev-haskell/gargoyle-postgresql:executables - Install executables
dev-haskell/gargoyle-postgresql-nix:executable - Install executables
dev-haskell/gauge:analysis - Build with statistical analysis support
dev-haskell/ghc-check:package-abis - record package abis at compile time for improved precision (requires compile-time TH)
dev-haskell/ghc-exactprint:roundtrip - Build roundtripping executables
dev-haskell/ghc-heap-view:prim-supports-any - The used GHC supports Any as an argument to foreign prim functions (GHC ticket #5931)
dev-haskell/ghc-prof:dump - Build the executable "dump"
dev-haskell/ghcide:executable - Build the ghcide executable
dev-haskell/ghcide:test-exe - Build the ghcide-test-preprocessor executable
dev-haskell/gi-cairo-render:svg - Build the Scalable Vector Graphics (SVG) backend of Cairo.
dev-haskell/github:openssl - "Use http-client-openssl"
dev-haskell/glfw:system-glfw - use media-libs/glfw instead of bundled version
dev-haskell/glib:closure-signals - Use the the GClosure-based signals implementation.
dev-haskell/gloss:glfw - Enable the GLFW backend
dev-haskell/gloss:glut - Enable the GLUT backend
dev-haskell/glutil:demos - Build demonstration programs
dev-haskell/gnuplot:buildexamples - Build test executables.
dev-haskell/gnuplot:executepipe - Avoid a temporary script by running with runInteractiveProcess.
dev-haskell/gnuplot:executeshell - Avoid a temporary script by calling via a UNIX shell and its piping syntax.
dev-haskell/graphscc:use-maps - Use IntMap instead of mutable arrays.
dev-haskell/gtk:deprecated - Include definitions in this library that are considered obsolete.
dev-haskell/gtk:fmode-binary - Set the default file translation mode for file I/O operations to _O_BINARY. Some GTK libraries open image files without specifing binary mode. If you have trouble loading gtk in ghci, then it may help to turn this option off.
dev-haskell/gtk:gio - Depend on GIO package, thereby enabling certain features.
dev-haskell/gtk2hs-buildtools:closuresignals - Use the the GClosure-based signals implementation.
dev-haskell/gtk3:fmode-binary - Set the default file translation mode for file I/O operations to _O_BINARY.
dev-haskell/gtk3:gio - Depend on GIO package, thereby enabling certain features.
dev-haskell/hackage-db:install-examples - Build and install example programs.
dev-haskell/hackage-security:lukko - Use @lukko@ for file-locking, otherwise use @GHC.IO.Handle.Lock@
dev-haskell/hadrian:test - Enables the hadrian selftest rules which require QuickCheck. Disabling it thus saves on a few dependencies which can be problematic when bootstrapping.
dev-haskell/hadrian:threaded - Build with the threaded runtime for improved performance. Users with bootstrap compilers which don't support the threaded runtime should disable this flag.
dev-haskell/hakyll:buildwebsite - Build the hakyll website
dev-haskell/hakyll:checkexternal - Include external link checking
dev-haskell/hakyll:previewserver - Include the preview server
dev-haskell/hakyll:usepandoc - Include Pandoc support
dev-haskell/hakyll:watchserver - Include the watch server
dev-haskell/handsomesoup:examples - Build examples
dev-haskell/happstack-plugins:tests - Build the testsuite, and include the tests in the library.
dev-haskell/hashable:random-initial-seed - Randomly initialize the seed on every executable invocation. This is not a security feature and is intended only for testing (it can affect legitimate use cases).
dev-haskell/hashtables:bounds-checking - if on, use bounds-checking array accesses
dev-haskell/hashtables:detailed-profiling - add detailed profiling information to profiled build-depends
dev-haskell/haskeline:terminfo - Use the terminfo package for POSIX consoles.
dev-haskell/haskell-language-server:hls_formatters_floskell - Enable floskell formatter
dev-haskell/haskell-language-server:hls_formatters_fourmolu - Enable fourmolu formatter
dev-haskell/haskell-language-server:hls_formatters_ormolu - Enable ormolu formatter
dev-haskell/haskell-language-server:hls_formatters_refactor - Enable refactor formatter
dev-haskell/haskell-language-server:hls_formatters_stylish-haskell - Enable stylishHaskell formatter
dev-haskell/haskell-language-server:hls_plugins_alternate-number-format - Enable Alternate Number Format plugin
dev-haskell/haskell-language-server:hls_plugins_cabal - Enable cabal plugin
dev-haskell/haskell-language-server:hls_plugins_change-type-signature - Change a declarations type signature with a Code Action
dev-haskell/haskell-language-server:hls_plugins_code-range - Enable codeRange plugin
dev-haskell/haskell-language-server:hls_plugins_eval - Enable eval plugin
dev-haskell/haskell-language-server:hls_plugins_explicit-fields - Enable explicit-fields plugin
dev-haskell/haskell-language-server:hls_plugins_explicit-fixity - Enable explicit-fixity plugin
dev-haskell/haskell-language-server:hls_plugins_gadt - Enable GADT plugin
dev-haskell/haskell-language-server:hls_plugins_hlint - Enable hlint plugin
dev-haskell/haskell-language-server:hls_plugins_import-lens - Enable importLens plugin
dev-haskell/haskell-language-server:hls_plugins_module-name - Enable moduleName plugin
dev-haskell/haskell-language-server:hls_plugins_pragmas - Enable pragmas plugin
dev-haskell/haskell-language-server:hls_plugins_qualify-imported-names - Enable qualifyImportedNames plugin
dev-haskell/haskell-language-server:hls_plugins_refine-imports - Enable refineImports plugin
dev-haskell/haskell-language-server:hls_plugins_rename - Enable rename plugin
dev-haskell/haskell-language-server:hls_plugins_retrie - Enable retrie plugin
dev-haskell/haskell-language-server:hls_plugins_splice - Enable splice plugin
dev-haskell/hdbc-sqlite3:splitbase - Choose the new smaller, split-up package.
dev-haskell/hedgehog-fn:build-examples - Build the example executables
dev-haskell/hiedb:executable - Install the hiedb executable
dev-haskell/highlighter:executable - Install a "highlighter" executable
dev-haskell/hip:disable-chart - Disable Chart-diagrams and Chart for a lighter dependency footprint
dev-haskell/hlibsass:externallibsass - Use LibSass that is installed in the system
dev-haskell/hlibsass:sharedlibsass - Build LibSass as a shared library (only if external_libsass = False)
dev-haskell/hlint:ghc-lib - Force dependency on ghc-lib-parser even if GHC API in the ghc package is supported
dev-haskell/hlint:gpl - Use GPL libraries, specifically hscolour
dev-haskell/hlint:hsyaml - Use HsYAML instead of yaml
dev-haskell/hls-graph:embed-files - Embed data files into the shake library
dev-haskell/hls-graph:stm-stats - Collect STM transaction stats
dev-haskell/hls-plugin-api:fingertree - Use fingertree implementation of RangeMap
dev-haskell/hmatrix:no-random-r - When enabled, hmatrix will not depend on the random_r() C function, it is needed for musl libc support.
dev-haskell/hnix:executable - Build the hnix executable
dev-haskell/hnix:optimize - Enable all optimization flags
dev-haskell/hps:build-exec - Build the `hps-fractals` executable
dev-haskell/hsexif:iconv - Enable encoding conversion of the User Comment tag with iconv. It's a nice thing to have but iconv is difficult to install on windows.
dev-haskell/hslua-cli:executable - Compile `hslua` standalone executable.
dev-haskell/hslua-repl:executable - Compile `luarepl` standalone executable.
dev-haskell/hsopenssl:fast-bignum - Enable fast moving of bignums between OpenSSL and GMP (GHC and OpenSSL version < 1.1.0 only).
dev-haskell/hsp:base4 - Use base-4.0.
dev-haskell/hsyaml:exe - Enable @exe:yaml-test@ component
dev-haskell/hsyaml-aeson:exe - Enable @exe:yaml-test@ component
dev-haskell/hsyslog:install-examples - Build and install example programs
dev-haskell/htf:executable - Build the htfpp executable
dev-haskell/http-api-data:text-show - Use text-show library for efficient ToHttpApiData implementations.
dev-haskell/http-client-openssl:test-proxy - Test with http-proxy
dev-haskell/httpd-shed:buildexamples - Build example executables.
dev-haskell/hvega:tools - Build associated tools (in general you won't need this)
dev-haskell/hw-prim:bounds-checking-enabled - Enable bmi2 instruction set
dev-haskell/hxt:profile - turn profiling on
dev-haskell/hxt-regex-xmlschema:profile - turn profiling on
dev-haskell/hyphenation:embed - Embed data in library binary (Warning: This increases the executable size by about 1Mb unless unneeded language data files are manually removed from the "data" directory before compiling)
dev-haskell/ignore:without-pcre - Disable pcre support
dev-haskell/implicit-hie:executable - Build the gen-hie executable
dev-haskell/inline-c:gsl-example - Build GSL example
dev-haskell/io-streams:network - Include network support
dev-haskell/io-streams:zlib - Include zlib support
dev-haskell/ipython-kernel:examples - Build example programs
dev-haskell/jmacro:benchmarks - Build the jmacro-bench executable
dev-haskell/jose-jwt:doctest - doctest
dev-haskell/jsaddle:call-stacks - Include HasCallStack constraint on calls unchecked calls
dev-haskell/jsaddle:check-unchecked - Fail unchecked calls when they are called (rather than when the result is evaluated)
dev-haskell/jsaddle-wkwebview:include-app-delegate - Include default AppDelegate C sources.
dev-haskell/json:mapdict - Encode Haskell maps as JSON dicts
dev-haskell/json:parsec - Add support for parsing with Parsec.
dev-haskell/json:pretty - Add support for using pretty printing combinators.
dev-haskell/judy:unsafe - Compile the library without locks. Code may be faster, but not threadsafe.
dev-haskell/juicypixels:mmap - Enable the file loading via mmap (memory map)
dev-haskell/juicypixels-extra:dev - Turn on development settings.
dev-haskell/jupyter:examples - Build example Jupyter kernel executables
dev-haskell/language-c-quote:full-haskell-antiquotes - Support full Haskell expressions/patterns in antiquotes
dev-haskell/language-dot:executable - Build the `ppdot' executable
dev-haskell/ldap:buildtests - Build the executable to run unit tests.
dev-haskell/libffi:ghc-bundled-libffi - When GHC is configured without @--with-system-libffi@, it will bundle its own copies of @libffi@, one of them statically linked and the other dynamically linked. This flag will force linking against the static copy of @libffi@ that GHC bundles. This avoids a GHC bug (https://gitlab.haskell.org/ghc/ghc/-/issues/15397) that can arise when the linker confuses the system's dynamic @libffi@ with GHC's own dynamic @libffi@. Note that this flag only works when GHC is configured without the @--with-system-libffi@ option. This is the case for most GHC binary distributions, such as those provided by @ghcup@. If you are using a GHC that was configured with @--with-system-libffi@, however, you will need to disable this option and link against the system's version of @libffi@ instead.
dev-haskell/libyaml:system-libyaml - Use the system-wide libyaml instead of the bundled copy
dev-haskell/libyaml:unicode - Enable unicode output. Otherwise, unicode characters will be escaped.
dev-haskell/linux-file-extents:examples - Build examples
dev-haskell/liquid-fixpoint:executable - Build the fixpoint executable
dev-haskell/liquiddesugar:devel - Turn on stricter error reporting for development.
dev-haskell/liquidhaskell:deterministic-profiling - Support building against GHC with <https://phabricator.haskell.org/D4388> backported
dev-haskell/liquidhaskell:mirror-modules-helper - Build the "mirror-modules" helper executable.
dev-haskell/liquidhaskell:no-plugin - Use the legacy executable for testing.
dev-haskell/logfloat:useffi - Use FFI to link C's log1p. Improves accuracy while maintaining the same performance. Disable only if your compiler doesn't support FFI.
dev-haskell/lpeg:rely-on-shared-lpeg-library - Do not build lpeg from source, but trust that lpeg is made available in other ways, e.g., through a system-wide installation. The loader will be replaced with a placeholder function that only emits a message.
dev-haskell/lua:system-lua - Use @pkg-config@ to discover library and include paths. Setting this flag implies `pkg-config`.
dev-haskell/markdown-unlit:executable - Build executable
dev-haskell/massiv:unsafe-checks - Enable all the bounds checks for unsafe functions at the cost of significant performance penalty
dev-haskell/midi-alsa:buildexamples - Build example executables.
dev-haskell/misfortune:executable - Build the misfortune and misfortune-strfile executables
dev-haskell/miso:jsstring-only - Always set MisoString = JSString
dev-haskell/mod:semirings - Derive semiring instances
dev-haskell/mod:vector - Derive unboxed and primitive vector instances
dev-haskell/monad-logger:template-haskell - Enable Template Haskell support
dev-haskell/monky:ibus - enable ibus example
dev-haskell/multistate:examples - Build the multistate-example executable
dev-haskell/nanovg:gles - Build for GLES3. This deactivates GL3 support.
dev-haskell/nanovg:truetype - Use freetype instead of bundled stb_truetype.
dev-haskell/nats:binary - You can disable the use of the `binary` package using `-f-binary`. Disabling this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users. If disabled we will not supply an instance of `Binary`.
dev-haskell/nats:hashable - You can disable the use of the `hashable` package using `-f-hashable`. Disabling this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users. If disabled we will not supply an instance of `Hashable`.
dev-haskell/nats:template-haskell - You can disable the use of the `template-haskell` package using `-f-template-haskell`. Disabling this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users. If disabled we will not supply an instance of `Lift`.
dev-haskell/network:devel - using tests for developers
dev-haskell/network-data:small-base - Build the split-up base package.
dev-haskell/nothunks:bytestring - Provide instances for bytestring
dev-haskell/nothunks:text - Provide instances for text
dev-haskell/nothunks:vector - Provide instances for vector
dev-haskell/openclwrappers:link - Link against OpenCL library.
dev-haskell/operational:buildexamples - Build example executables.
dev-haskell/optics-core:explicit-generic-labels - Require explicit GenericLabelOptics instances in order to use generics-based labels
dev-haskell/optparse-simple:build-example - Build the example executable
dev-haskell/ormolu:executable - Install the ormolu executable
dev-haskell/parsec-numbers:parsec1 - use dev-haskell/parsec1 instead of dev-haskell/parsec
dev-haskell/parsers:attoparsec - You can disable the use of the `attoparsec` package using `-f-attoparsec`.
dev-haskell/parsers:binary - You can disable the use of the `binary` package using `-f-binary`.
dev-haskell/parsers:parsec - You can disable the use of the `parsec` package using `-f-parsec`.
dev-haskell/patch:hlint-test - Enable hlint test
dev-haskell/persistent-mongodb:high-precision-date - for MongoDB use a time storage with nano second precision.
dev-haskell/persistent-odbc:debug - Enable debug
dev-haskell/persistent-odbc:tester - Enable test
dev-haskell/persistent-relational-record:test-examples - Test examples
dev-haskell/persistent-sqlite:build-sanity-exe - Build a sanity check test executable
dev-haskell/pipes-text:maintainer - Enable settings for the package maintainer.
dev-haskell/pointed:comonad - You can disable the use of the `comonad` package using `-f-transformers`.
dev-haskell/pointed:kan-extensions - You can disable the use of the `kan-extensions` package using `-f-kan-extensions`.
dev-haskell/pointed:semigroupoids - You can disable the use of the `semigroupoids` package using `-f-semigroupoids`.
dev-haskell/pointed:semigroups - You can disable the use of the `semigroups` package using `-f-semigroups`.
dev-haskell/pointed:stm - You can disable the use of the `stm` package using `-f-stm`.
dev-haskell/pointed:tagged - You can disable the use of the `tagged` package using `-f-tagged`.
dev-haskell/pointed:transformers - You can disable the use of the `transformers` package using `-f-transformers`.
dev-haskell/pointed:unordered-containers - You can disable the use of the `unordered-containers` package using `-f-unordered-containers`.
dev-haskell/postgresql-typed:aeson - Support decoding json via aeson.
dev-haskell/postgresql-typed:binary - Use binary protocol encoding via postgresql-binary. This may put additional restrictions on supported PostgreSQL server versions.
dev-haskell/postgresql-typed:hdbc - Provide an HDBC driver backend using the raw PostgreSQL protocol.
dev-haskell/postgresql-typed:md5 - Enable md5 password authentication method.
dev-haskell/postgresql-typed:scientific - Support decoding numeric via scientific (implied by binary).
dev-haskell/postgresql-typed:text - Support Text string values via text (implied by binary).
dev-haskell/postgresql-typed:tls - Enable TLS (SSL) support in PostgreSQL server connections.
dev-haskell/postgresql-typed:uuid - Support the UUID type via uuid (implied by binary).
dev-haskell/pretty-simple:executable - Build an small command line program that pretty-print anything from stdin.
dev-haskell/prettyprinter:buildreadme - Build the readme generator
dev-haskell/prettyprinter:text - While it's a core value of @prettyprinter@ to use @Text@, there are rare circumstances (mostly when @prettyprinter@ arises as a dependency of test suites of packages like @bytestring@ or @text@ themselves) when this is inconvenient. In this case one can disable this flag, so that @prettyprinter@ fallbacks to @String@.
dev-haskell/profiteur:embed-data-files - Embed data files into the executable (needed for ghcjs packaging)
dev-haskell/publicsuffixlist:create - export Network.PublicSuffixList.Create module
dev-haskell/publicsuffixlist:runtimelist - read suffix list from dist at startup instead of embedding list into library
dev-haskell/pyf:python-test - Enable extensive python testing
dev-haskell/quickcheck:template-haskell - Build Test.QuickCheck.All, which uses Template Haskell.
dev-haskell/quickcheck-classes:aeson - You can disable the use of the `aeson` package using `-f-aeson`. This may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/quickcheck-classes:binary-laws - Include infrastructure for testing class laws of binary type constructors. It is required that this flag match the value that the `unary-laws` flag was given when building `quickcheck-classes-base`. Disabling `unary-laws` while keeping `binary-laws` enabled is an unsupported configuration.
dev-haskell/quickcheck-classes:semigroupoids - You can disable the use of the `semigroupoids` package using `-f-semigroupoids`. This may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/quickcheck-classes:semirings - You can disable the use of the `semirings` package using `-f-semirings`. This may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/quickcheck-classes:unary-laws - Include infrastructure for testing class laws of unary type constructors. It is required that this flag match the value that the `unary-laws` flag was given when building `quickcheck-classes-base`.
dev-haskell/quickcheck-classes:vector - You can disable the use of the `vector` package using `-f-vector`. This may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/quickcheck-classes-base:binary-laws - Include infrastructure for testing class laws of binary type constructors. Disabling `unary-laws` while keeping `binary-laws` enabled is an unsupported configuration.
dev-haskell/quickcheck-classes-base:unary-laws - Include infrastructure for testing class laws of unary type constructors.
dev-haskell/random-bytestring:pcg - compile with support for PCG from pcg-random
dev-haskell/rasterific:embed-linear - Embed a reduced version of Linear avoiding a (huge) dep
dev-haskell/reactive-banana-wx:examples - Build example executables.
dev-haskell/record-dot-preprocessor:executable - Build the record-dot-preprocessor executable
dev-haskell/reflex:plugin - Use the GHC plugin Reflex.Optimizer on some of the modules in the package. This is still experimental.
dev-haskell/reflex:template-haskell - Use template haskell to generate lenses
dev-haskell/rere:cfg - CFG functionality, adds dependency on fin and vec
dev-haskell/rere:intersection - Add intersection constructor. EXPERIMENTAL
dev-haskell/retrie:examples - build the retrie-example executable
dev-haskell/retrie:executable - build the retrie executable
dev-haskell/sample-frame:buildbenchmarks - Build benchmark executables
dev-haskell/sandi:conduit - Build with conduit
dev-haskell/sbv:skip-hlint-tester - Do not build the HLint tester
dev-haskell/sdl2:examples - Build opengl-example
dev-haskell/sdl2:no-linear - Do not depend on 'linear' library
dev-haskell/semialign:semigroupoids - Build with semigroupoids dependency
dev-haskell/semigroupoid-extras:profunctors - You can disable the use of the `profunctors` package using `-f-profunctors`. Disabing this is an unsupported configuration, but it may be useful for accelerating builds in sandboxes for expert users.
dev-haskell/sendfile:portable - Explicitly enable portable sendfile support (implemented in Haskell)
dev-haskell/sha:exe - Build a sha1 and a sha384 executable similar to 'md5sum'.
dev-haskell/shellac-compatline:editline - Use editline instead of readline backend.
dev-haskell/shelly:lifted - run the tests against Shelly.Lifted
dev-haskell/simple-affine-space:test-doc-coverage - Enable haddock coverage test suite
dev-haskell/simple-affine-space:test-hlint - Enable hlint test suite
dev-haskell/simple-sendfile:allow-bsd - Allow use of BSD sendfile (disable on GNU/kFreeBSD)
dev-haskell/skein:big-endian - When manually selecting the endianness, use big-endian (default is little-endian).
dev-haskell/skein:force-endianness - Use a manually selected endian when compiling (see flag 'big-endian').
dev-haskell/skein:reference - Use the reference implementation instead of the optimized one.
dev-haskell/skylighting:executable - Whether to build the skylighting program
dev-haskell/skylighting-core:executable - Build skylighting-extract tool
dev-haskell/snap-server:openssl - Enable https support using the HsOpenSSL library.
dev-haskell/snap-server:pong-server - Build a server that just returns "PONG". Normally useful only for benchmarks.
dev-haskell/snap-server:test-server - Build the blackbox testserver
dev-haskell/some:newtype-unsafe - Use implementation using @newtype@ and unsafe @Any@, instead of GADT
dev-haskell/speculation:optimize - Enable optimizations
dev-haskell/sphinx:version-1-1-beta - By default this library is compatible with version 2.0 beta of Sphinx. Use this flag if you use Sphinx 1.1
dev-haskell/splitmix:optimised-mixer - Use JavaScript for mix32
dev-haskell/sr-extra:network-uri - Get Network.URI from the network-uri package rather than the full network package.
dev-haskell/sr-extra:omit-data - Omit all Data instances
dev-haskell/sr-extra:omit-serialize - Omit all the Serialize instances, on the assumption that we will use SafeCopy instances instead.
dev-haskell/ssh-known-hosts:sample_progs - Build sample programs
dev-haskell/stack:integration-tests - Run the integration test suite.
dev-haskell/stan:executable - Build the stan executable
dev-haskell/stateref:usestm - Include instances for STM types.
dev-haskell/stateref:usetmvar - Include instances for TMVar.
dev-haskell/store-core:force-alignment - Adds -DALIGNED_MEMORY to cpp-options
dev-haskell/streamly:c-malloc - Use C malloc instead of GHC malloc
dev-haskell/streamly:fusion-plugin - Use fusion plugin for benchmarks and executables
dev-haskell/streamly:limit-build-mem - Limits memory when building
dev-haskell/streamly:minimal - Build only the core modules
dev-haskell/streamly:no-fusion - Disable rewrite rules for stream fusion
dev-haskell/streamly:streamk - Use CPS style streams when possible
dev-haskell/streamly:unliftio - Use unliftio-core instead of monad-control
dev-haskell/string-interpolate:bytestring-builder - Use ByteString Builders to construct ByteString outputs instead of the ByteString type itself. If you're regularly constructing large (>50KB) bytestrings, enabling this can speed up your code. Otherwise, enabling this is likely to be a net slowdown.
dev-haskell/string-interpolate:extended-benchmarks - Enable benchmarks for Interpolation and interpolatedstring-perl6
dev-haskell/string-interpolate:text-builder - Use Text Builders to construct Text outputs instead of the Text type itself. If you're regularly constructing large (>50KB) text objects, enabling this can speed up your code. Otherwise, enabling this is likely to be a net slowdown.
dev-haskell/stylish-haskell:ghc-lib - Force dependency on ghc-lib-parser even if GHC API in the ghc package is supported
dev-haskell/synthesizer-alsa:examples - Build example executables
dev-haskell/synthesizer-midi:buildexamples - Build example executables
dev-haskell/system-uuid:cli - Enable command line tool
dev-haskell/tasty:clock - Depend on the clock package for more accurate time measurement
dev-haskell/tasty-discover:executable - Build the tasty-discover executable
dev-haskell/texmath:executable - Compile test executable.
dev-haskell/texmath:server - Compile webserver.
dev-haskell/text:integer-simple - Use the [simple integer library](http://hackage.haskell.org/package/integer-simple) instead of [integer-gmp](http://hackage.haskell.org/package/integer-gmp)
dev-haskell/text:simdutf - use simdutf library
dev-haskell/text-short:debug - Enable runtime-checks via @assert@
dev-haskell/themoviedb:maintainer - Enable settings for the package maintainer.
dev-haskell/threepenny-gui:rebug - Expose more bugs by increasing determinism
dev-haskell/thyme:bug-for-bug - bug-for-bug compatibility with time
dev-haskell/thyme:lens - use the full lens package
dev-haskell/thyme:show-internal - instance Show of internal representation
dev-haskell/tls:compat - Accept SSLv2 client hello for beginning SSLv3 / TLS handshake
dev-haskell/tls:network - Use the base network library
dev-haskell/tomland:example-play-tomland - Build play-tomland executable
dev-haskell/tomland:example-readme - Build example-tomland generator
dev-haskell/transformers-base:orphaninstances - Build instances for orphan datatypes.
dev-haskell/tz:template-haskell - Enable the use of and export Template Haskell functionality. (Might need to disable this for cross-compiling.)
dev-haskell/unagi-chan:compare-benchmarks - compare benchmarks with Chan, TQueue, and (eventually) lockfree-queue?
dev-haskell/unboxing-vector:mono-traversable - Define instances for MonoTraversable
dev-haskell/unicode-collation:doctests - Run doctests as part of test suite. Use with: @--write-ghc-environment-files=always@.
dev-haskell/unicode-collation:executable - Build the unicode-collate executable.
dev-haskell/unix-compat:old-time - build against old-time package
dev-haskell/uri-encode:tools - Build executables
dev-haskell/uuagc:loag - Use MiniSat as external SAT-solver to schedule all Linear Ordered AGs
dev-haskell/vec:adjunctions - Depend on @adjunctions@ to provide its instances
dev-haskell/vec:distributive - Depend on @distributive@ to provide its instances. Turning on, disables @adjunctions@ too.
dev-haskell/vec:semigroupoids - Depend on @semigroupoids@ to provide its instances, and `traverse1`.
dev-haskell/vector:boundschecks - Enable bounds checking
dev-haskell/vector:internalchecks - Enable internal consistency checks at the cost of a significant performance penalty
dev-haskell/vector:unsafechecks - Enable bounds checking in unsafe operations at the cost of a significant performance penalty
dev-haskell/vector-algorithms:bench - Build a benchmarking program to test vector-algorithms performance
dev-haskell/vector-algorithms:boundschecks - Enable bounds checking
dev-haskell/vector-algorithms:internalchecks - Enable internal consistency checks at the cost of a significant performance penalty.
dev-haskell/vector-algorithms:properties - Enable the quickcheck tests
dev-haskell/vector-algorithms:unsafechecks - Enable bounds checking in unsafe operations at the cost of a significant performance penalty.
dev-haskell/vector-instances:hashable - use dev-haskell/hashable
dev-haskell/void:safe - Disable effective but unsafe coercions
dev-haskell/wai-app-static:print - print debug info
dev-haskell/warp:x509 - Adds a dependency on the x509 library to enable getting TLS client certificates.
dev-haskell/wcwidth:cli - Enable command line tool
dev-haskell/xeno:libxml2 - Include libxml2 in the benchmarks
dev-haskell/xlsx:microlens - Use microlens instead of lens
dev-haskell/yaml:executable - Install the yaml2json and json2yaml executables
dev-haskell/yesod-form:network-uri - Get Network.URI from the network-uri package
dev-haskell/yesod-paginator:examples - Build the examples
dev-haskell/zip-archive:executable - Build the Zip executable.
dev-haskell/zlib:bundled-c-zlib - Use the bundled zlib C sources. Requires pkg-config to be False. For windows, this is the default.
dev-haskell/zlib:non-blocking-ffi - The (de)compression calls can sometimes take a long time, which prevents other Haskell threads running. Enabling this flag avoids this unfairness, but with greater overall cost.
dev-haskell/zxcvbn-hs:executable - Build the zxcvbn-tools executable
dev-lang/cryptol:relocatable - Don't use the Cabal-provided data directory for looking up Cryptol libraries.
dev-lang/dhall:http - Include support for importing dhall modules from HTTP URLs
dev-lang/dhall:http-client-tls - Use http-client-tls for resolving HTTP imports by default (requires with-http to be enabled)
dev-lang/elm-compiler-bin:symlink - Create a symlink to "elm", instead of just installing "elm-bin" binary.
dev-lang/ghc:binary - Install the binary version directly, rather than using it to build the source version.
dev-lang/ghc:elfutils - Enable DWARF-based backtraces using dev-libs/elfutils.
dev-lang/ghc:ghcbootstrap - Internal: Bootstrap GHC from an existing GHC installation.
dev-lang/ghc:ghcmakebinary - Internal: Build binary friendly for redistribution.
dev-lang/ghc:gmp - Use dev-libs/gmp for integer operations (works faster, but an external depend).
dev-lang/ghc:llvm - Pull in dependencies for the sys-devel/llvm codegen backend.
dev-lang/ghc:numa - Enable NUMA thread balancing policy using sys-process/numactl.
dev-lang/ghc:unregisterised - Create an unregisterised build in which only the C codegen backend will be available.
dev-util/bustle:interactivetests - Build interactive test programs
dev-util/bustle:threaded - Build with the multi-threaded runtime
dev-util/shake:embed-files - Embed data files into the shake library
dev-vcs/darcs:curl - Use libcurl for HTTP support.
dev-vcs/darcs:terminfo - Use the terminfo package for enhanced console support.
dev-vcs/darcs:threaded - Use threading and SMP support.
dev-vcs/git-annex:assistant - Enable git-annex assistant and watch command
dev-vcs/git-annex:benchmark - Enable benchmarking
dev-vcs/git-annex:dbus - Enable dbus support
dev-vcs/git-annex:gitlfs - Build with git-lfs library (rather than vendored copy)
dev-vcs/git-annex:magicmime - Use libmagic to determine file MIME types
dev-vcs/git-annex:pairing - Enable pairing
dev-vcs/git-annex:torrentparser - Use haskell torrent library to parse torrent files
dev-vcs/git-annex:webapp - Enable git-annex webapp
games-puzzle/intricacy:curses - Enables curses user interface
games-puzzle/intricacy:sdl - Enables SDL user interface
games-puzzle/intricacy:sound - Enables sound in SDL user interface
media-gfx/gifcurry:gtk - Build the gifcurry_gui executable
sci-mathematics/agda:cpphs - Use cpphs instead of cpp.
sci-mathematics/agda:enable-cluster-counting - Enable the --count-clusters flag. (If enable-cluster-counting is False, then the --count-clusters flag triggers an error message.)
sci-mathematics/agda:optimise-heavily - Enable some expensive optimisations when compiling Agda.
sci-mathematics/agda:stdlib - Install the standard library.
www-apps/gitit:plugins - Compile in support for plugins. This will increase the size of the executable and the memory it uses, so those who will not need plugins should disable this flag.
www-servers/mighttpd2:tls - HTTPS support.
x11-misc/gtk-sni-tray:executable - Build the gtk-sni-tray-standalone executable
x11-misc/taffybar:cryptocurrency - Enable crypto assets widget.
x11-misc/xmobar:alsa - Use alsa-mixer to get the volume from soundcards.
x11-misc/xmobar:datezone - Enables localized date support.
x11-misc/xmobar:dbus - Publish a service on the session bus for controlling xmobar.
x11-misc/xmobar:mpd - MPD support. Needs libmpd installed.
x11-misc/xmobar:mpris - MPRIS v1, v2 support.
x11-misc/xmobar:rtsopts - Use -with-rtsopts=-V0 to reduce wakeups.
x11-misc/xmobar:uvmeter - UVMeter only useful to australians.
x11-misc/xmobar:weather - Enable weather plugin.
x11-misc/xmobar:wifi - Wireless info support via nl80211. Required for the Wireless plugin on systems running Linux, the kernel.
x11-misc/xmobar:xpm - Enable usage of xpm for icons.
x11-misc/xmobar:xrender - Use XRender for alpha background pseudo-transparency.
x11-misc/xmonad-extras:alsa - Build modules depending on the alsa-mixer package
x11-misc/xmonad-extras:brightness - Build module for brightness control.
x11-misc/xmonad-extras:eval - Build modules depending on hint(for evaluating Haskell expressions at runtime).
x11-misc/xmonad-extras:mpd - Build modules depending on libmpd.
x11-misc/yeganesh:profiling - Build with profiling and -auto-all
x11-wm/xmonad:no-autorepeat-keys - Allow ignoring of keyboard autorepeat.
x11-wm/xmonad:test - 
x11-wm/xmonad-contrib:xft - Use Xft to render text
